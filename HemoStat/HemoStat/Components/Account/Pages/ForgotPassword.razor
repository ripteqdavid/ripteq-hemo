@page "/Account/ForgotPassword"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using HemoStat.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<div class="main-content">
    <div class="block-content">
        <div class="title">
            <div class="title-header-text">Forgot your password?</div>
            <div class="title-content-text">Enter your email.</div>
        </div>
        <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post" Context="resend">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
                <DxFormLayoutItem Caption="Email" ColSpanMd="12" BeginRow="true">
                    <DxTextBox ShowValidationIcon="true" @bind-Text="Input.Email" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                    <DxButton CssClass="w-100" SubmitFormOnClick="true" Text="Reset password"></DxButton>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
        <div class="links-container">
            <span>Go back to <a href="Account/Login">Login Page</a>?</span>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}