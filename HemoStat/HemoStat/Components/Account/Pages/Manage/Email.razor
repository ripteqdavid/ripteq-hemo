@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using HemoStat.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer

<PageTitle>Manage email</PageTitle>
<div class="block-content">
    <StatusMessage Message="@message" />
    <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post" Context="changeemail">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
            <DxFormLayoutItem Caption="Email" ColSpanMd="12" BeginRow="true">
                <DxTextBox @bind-Text="@email" Enabled="false" />
            </DxFormLayoutItem>
            @if(!isEmailConfirmed) {
                <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                    <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
                        <AntiforgeryToken />
                    </form>
                    <DxButton CssClass="w-100" SubmitFormOnClick="true" Text="Send verification email" form="send-verification-form"></DxButton>
                </DxFormLayoutItem>
            }
            <DxFormLayoutItem Caption="New email" ColSpanMd="12" BeginRow="true">
                <DxTextBox @bind-Text="@Input.NewEmail" ShowValidationIcon="true" />
                <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                <DxButton CssClass="w-100" SubmitFormOnClick="true" Text="Change email"></DxButton>
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    private HttpContext HttpContext => HttpContextAccessor.HttpContext;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync() {
        if(Input.NewEmail is null || Input.NewEmail == email) {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync() {
        if(email is null) {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}