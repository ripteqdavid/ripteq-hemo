@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using HemoStat.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

<PageTitle>Delete Personal Data</PageTitle>

<StatusMessage Message="@message" />
<div class="block-content">
    <div class="title">
        <div class="title-content-text-secondary">Delete Personal Data</div>
    </div>
    <div>Deleting this data will permanently remove your account, and this cannot be recovered.</div>

    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post" Context="DeleteUser">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <DeletePersonalDataForm RequirePassword="requirePassword" Input="Input"></DeletePersonalDataForm>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private DeletePersonalDataForm.InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnValidSubmitAsync() {
        if(requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password)) {
            message = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if(!result.Succeeded) {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }
}