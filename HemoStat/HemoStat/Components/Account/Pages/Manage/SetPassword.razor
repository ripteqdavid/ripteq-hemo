@page "/Account/Manage/SetPassword"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using HemoStat.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Set password</PageTitle>
<div class="title">
    <div class="title-content-text-secondary">
        You do not have a local username/password for this site. Add a local
        account so you can log in without an external login.
    </div>
</div>
<div class="block-content">
    <StatusMessage Message="@message" />
    <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post" Context="SetPassword">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
            <DxFormLayoutItem Caption="New password" ColSpanMd="12" BeginRow="true">
                <DxTextBox @bind-Text="@Input.NewPassword" Password="true" />
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Confirm password" ColSpanMd="12" BeginRow="true">
                <DxTextBox @bind-Text="@Input.ConfirmPassword" Password="true" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                <DxButton CssClass="w-100" SubmitFormOnClick="true" Text="Set password"></DxButton>
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    private HttpContext HttpContext => HttpContextAccessor.HttpContext;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            NavigationManager.NavigateTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        message = "Your password has been set.";
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}