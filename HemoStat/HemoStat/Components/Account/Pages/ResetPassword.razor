@page "/Account/ResetPassword"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using HemoStat.Data

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<div class="main-content">
    <div class="block-content">
        <div class="title">
            <div class="title-header-text">Reset password</div>
            <div class="title-content-text">Reset your password.</div>
        </div>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post" Context="resend">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
                <DxFormLayoutItem Caption="Email" ColSpanMd="12" BeginRow="true">
                    <DxTextBox ShowValidationIcon="true" @bind-Text="Input.Email" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Password" ColSpanMd="12" BeginRow="true">
                    <DxTextBox ShowValidationIcon="true" @bind-Text="Input.Password" Password="true" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="ConfirmPassword" ColSpanMd="12" BeginRow="true">
                    <DxTextBox ShowValidationIcon="true" @bind-Text="Input.ConfirmPassword" Password="true" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                    <DxButton CssClass="w-100" SubmitFormOnClick="true" Text="Reset"></DxButton>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
        <div class="links-container">
            <span>Go back to <a href="Account/Login">Login Page</a>?</span>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized() {
        if(Code is null) {
            NavigationManager.NavigateTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode("test"));
    }

    private async Task OnValidSubmitAsync() {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if(user is null) {
            // Don't reveal that the user does not exist
            NavigationManager.NavigateTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if(result.Succeeded) {
            NavigationManager.NavigateTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}